using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TournamentTrackerLibrary.Models;

// changing the namespace so that only people having the using statement get the extra clutter that this is gonna craete
// namespace TournamentTrackerLibrary.DataAccess
namespace TournamentTrackerLibrary.DataAccess.TextHelpers
{
    
    
    //Step 3: Find the max ID
    //Step 4: Add the new record with the new ID ie, Max+1S
    //Step 5: Convert the Prizes to a List<String>
    //Step 6: Save the List<String> to the text File


    public static class TextConnectorProcessor
    {

        // if you see the "this" keyword here, it's an extension manager where by the end of the method the full file path is stored back in fileName.
        public static string FullFilePath(this string fileName) // sample filename would be like PrizeModels.csv
        {
            // this method takes the fileName and returns back the entire path -- mergiing with the path in from the app.config

            // the $"" allows us to concatenate strings together
            // here the \\ is the first one is escape haracter amd the second \ is actual backslash
            return $"{ ConfigurationManager.AppSettings["filePath"] }\\{fileName}";
        }

        //Step 1: Load the text file

        // It will take in the full file path from above method and it's gonna load that string  
        public static List<string> LoadFile(this string file) 
        { 
            // this checks if the file doesn't exists in File of system.io namespace then return an empty list
            if (!File.Exists(file))
            {
                return new List<string>();
            }
            //if exists return list of all the lines in the text file
            return File.ReadAllLines(file).ToList();
        }


        //Step 2: Convert the text to a List<Prize Model>

        // This method takes the list of lines generated by the above method and converts it into a list of PrizeModel
        public static List<PrizeModel> ConvertToPrizeModels(this List<string> lines)
        {
            List<PrizeModel> output = new List<PrizeModel>();
            foreach(string line in lines)
            {
                string[] cols = line.Split(',');
                PrizeModel p = new PrizeModel();
                p.Id = int.Parse(cols[0]);
                p.PlaceNumber = int.Parse(cols[1]);
                p.PlaceName = cols[2];
                p.PrizeAmount = decimal.Parse(cols[3]);
                p.PrizePercentage = double.Parse(cols[4]);
                output.Add(p);
            }
            return output;
        }

        public static List<PersonModel> ConvertToPersonModels(this List<string> lines)
        {
            List<PersonModel> output = new List<PersonModel>();
            foreach (string line in lines)
            {
                string[] cols = line.Split(',');
                PersonModel p = new PersonModel();
                p.PersonId = int.Parse(cols[0]);
                p.FirstName = cols[1];
                p.LastName = cols[2];
                p.Email = cols[3];
                p.Phone = cols[4];
                output.Add(p);
            }
            return output;
        }

        public static List<TeamModel> ConvertToTeamModels(this List<string> lines, string PeopleFileName)
        {
            // our text file must have values in like --> Id, team name , list of ids seperated by pipe for person ids - ex: 1, Team one, 1|2|3
            List<TeamModel> output = new List<TeamModel>();
            List<PersonModel> people = PeopleFileName.FullFilePath().LoadFile().ConvertToPersonModels();
            foreach (string line in lines)
            {
                string[] cols = line.Split(',');
                TeamModel t = new TeamModel();
                t.TeamId = int.Parse(cols[0]);
                t.TeamName = cols[1];
                string[] personIds = cols[2].Split('|');
                foreach (string id in personIds)
                {
                    t.TeamMembers.Add(people.Where(x => x.PersonId == int.Parse(id)).First());
                }
                output.Add(t);
            }
            return output;
        }

        public static List<TournamentModel> ConvertToTournamentModels(this List<string> lines, string teamFileName, string peopleFileName, string prizeFileName)
        {
            // our text file must have values in like --> 
            // Id, tournament name , Entry fee, Entered teams-(id|id|id), Prizes-(id|id|id), round-{ id^id^id|id^id^id|id^id^id }

            List<TournamentModel> output = new List<TournamentModel>();
            List<TeamModel> teams = teamFileName.FullFilePath().LoadFile().ConvertToTeamModels(peopleFileName);
            List<PrizeModel> prizes = prizeFileName.FullFilePath().LoadFile().ConvertToPrizeModels();
            foreach (string line in lines)
            {
                string[] cols = line.Split(',');
                TournamentModel tm = new TournamentModel();
                tm.TournamentId = int.Parse(cols[0]);
                tm.TournamentName = cols[1];
                tm.EntryFee = decimal.Parse(cols[2]);

                string[] teamIds = cols[3].Split('|');
                foreach (string id in teamIds)
                {
                    tm.EnteredTeams.Add(teams.Where(x => x.TeamId == int.Parse(id)).First());
                }

                string[] PrizeIds = cols[4].Split('|');
                foreach (string id in PrizeIds)
                {
                    tm.Prizes.Add(prizes.Where(x => x.Id == int.Parse(id)).First());
                }

                //TODO Capture runds information

                output.Add(tm);
            }
            return output;
        }

        //Step 5: Convert the Prizes to a List<String>
        public static void SaveToPrizeFile(this List<PrizeModel> models, string fileName)
        {
            List<string> lines = new List<string>();

            foreach(PrizeModel p in models)
            {
                lines.Add($"{ p.Id },{ p.PlaceNumber },{ p.PlaceName },{ p.PrizeAmount },{ p.PrizePercentage }");
            }

            File.WriteAllLines(fileName.FullFilePath(), lines);
        }

        public static void SaveToPeopleFile(this List<PersonModel> models, string fileName)
        {
            List<string> lines = new List<string>();

            foreach (PersonModel p in models)
            {
                lines.Add($"{ p.PersonId },{ p.FirstName },{ p.LastName },{ p.Email },{ p.Phone }");
            }

            File.WriteAllLines(fileName.FullFilePath(), lines);
        }

        public static void SaveToTeamFile(this List<TeamModel> models, string fileName)
        {
            List<string> lines = new List<string>();

            foreach (TeamModel t in models)
            {
                lines.Add($"{ t.TeamId },{ t.TeamName },{ ConvertPeopleListToString(t.TeamMembers) }");
            }

            File.WriteAllLines(fileName.FullFilePath(), lines);
        }

        public static void SaveToTournamentFile(this List<TournamentModel> models, string fileName)
        {
            List<string> lines = new List<string>();
            foreach (TournamentModel tm in models)
            {
                lines.Add($@"{ tm.TournamentId },
                             { tm.TournamentName },
                             { tm.EntryFee },
                             { ConvertTeamListToString(tm.EnteredTeams) },
                             { ConvertPrizesListToString(tm.Prizes) },
                             { ConvertRoundListToString(tm.Rounds) }");
            }
            File.WriteAllLines(fileName.FullFilePath(), lines);
        }


        private static string ConvertPeopleListToString(List<PersonModel> people)
        {
            string output = "";
            if (people.Count == 0)
            {
                return "";
            }
            foreach(PersonModel p in people)
            {
                output += $"{ p.PersonId}|";
            }
            output = output.Substring(0, output.Length - 1);
            return output;
        }

        private static string ConvertPrizesListToString(List<PrizeModel> prizes)
        {
            string output = "";
            if (prizes.Count == 0)
            {
                return "";
            }
            foreach (PrizeModel p in prizes)
            {
                output += $"{ p.Id}|";
            }
            output = output.Substring(0, output.Length - 1);
            return output;
        }

        private static string ConvertRoundListToString(List<List<MatchupModel>> rounds)
        {
            //round-{ id^id^id|id^id^id|id^id^id
            string output = "";
            if (rounds.Count == 0)
            {
                return "";
            }
            foreach (List<MatchupModel> r in rounds)
            {
                output += $"{ ConvertMatchUpListtoString(r) }|";
            }
            output = output.Substring(0, output.Length - 1);
            return output;
        }

        private static string ConvertMatchUpListtoString(this List<MatchupModel> matchups)
        {
            string output = "";
            if (matchups.Count == 0)
            {
                return "";
            }
            foreach (MatchupModel m in matchups)
            {
                output += $"{ m.MatchupId}^";
            }
            output = output.Substring(0, output.Length - 1);
            return output;
        }

        private static string ConvertTeamListToString(List<TeamModel> teams)
        {
            string output = "";
            if (teams.Count == 0)
            {
                return "";
            }
            foreach (TeamModel p in teams)
            {
                output += $"{ p.TeamId}|";
            }
            output = output.Substring(0, output.Length - 1);
            return output;
        }
    }
}
